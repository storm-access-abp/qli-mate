"use client";

import * as React from "react";
import { Area, AreaChart, CartesianGrid, XAxis } from "recharts";
import { getMaxSensorTemp, getMinSensorTemp } from "@/lib/sensorData";

import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  ChartConfig,
  ChartContainer,
  ChartLegend,
  ChartLegendContent,
  ChartTooltip,
  ChartTooltipContent,
} from "@/components/ui/chart";

// Função para combinar dados de temperatura máxima e mínima
const fetchData = async () => {
  const response = await fetch("/app/api/sensorData");
  if (!response.ok) {
    throw new Error("Failed to fetch data");
  }
  return response.json();
};

const chartConfig = {
  minima: {
    label: "Temperatura Mínima",
    color: "hsl(var(--chart-1))",
  },
  maxima: {
    label: "Temperatura Máxima",
    color: "hsl(var(--chart-2))",
  },
} satisfies ChartConfig;

type ChartDataItem = {
  date: string;
  maxima: number;
  minima: number | null;
};

export function Component() {
  const [chartData, setChartData] = React.useState<ChartDataItem[]>([]);

  React.useEffect(() => {
    const loadChartData = async () => {
      const data = await fetchData();
      setChartData(data);
    };
    loadChartData();
  }, []);

  return (
    <Card>
      <CardHeader className="flex items-center gap-2 space-y-0 border-b py-5 sm:flex-row">
        <div className="grid flex-1 gap-1 text-center sm:text-left">
          <CardTitle>Temperatura</CardTitle>
          <CardDescription>Ao longo do mês</CardDescription>
        </div>
      </CardHeader>
      <CardContent className="px-2 pt-4 sm:px-6 sm:pt-6">
        <ChartContainer
          config={chartConfig}
          className="aspect-auto h-[250px] w-full"
        >
          <AreaChart data={chartData}>
            <defs>
              <linearGradient id="fillminima" x1="0" y1="0" x2="0" y2="1">
                <stop
                  offset="5%"
                  stopColor="var(--color-minima)"
                  stopOpacity={0.8}
                />
                <stop
                  offset="95%"
                  stopColor="var(--color-minima)"
                  stopOpacity={0.1}
                />
              </linearGradient>
              <linearGradient id="fillmaxima" x1="0" y1="0" x2="0" y2="1">
                <stop
                  offset="5%"
                  stopColor="var(--color-maxima)"
                  stopOpacity={0.8}
                />
                <stop
                  offset="95%"
                  stopColor="var(--color-maxima)"
                  stopOpacity={0.1}
                />
              </linearGradient>
            </defs>
            <CartesianGrid vertical={false} />
            <XAxis
              dataKey="date"
              tickLine={false}
              axisLine={false}
              tickMargin={8}
              minTickGap={32}
              tickFormatter={(value) => {
                const date = new Date(value);
                return date.toLocaleDateString("pt-BR", {
                  month: "short",
                  day: "numeric",
                });
              }}
            />
            <ChartTooltip
              cursor={false}
              content={
                <ChartTooltipContent
                  labelFormatter={(value) => {
                    return new Date(value).toLocaleDateString("pt-BR", {
                      month: "short",
                      day: "numeric",
                    });
                  }}
                  indicator="dot"
                />
              }
            />
            <Area
              dataKey="maxima"
              type="natural"
              fill="url(#fillmaxima)"
              stroke="var(--color-maxima)"
              stackId="a"
            />
            <Area
              dataKey="minima"
              type="natural"
              fill="url(#fillminima)"
              stroke="var(--color-minima)"
              stackId="a"
            />
            <ChartLegend content={<ChartLegendContent />} />
          </AreaChart>
        </ChartContainer>
      </CardContent>
    </Card>
  );
}
